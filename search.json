[{"path":"https://profvis.r-lib.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 profvis authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://profvis.r-lib.org/articles/examples.html","id":"example-1","dir":"Articles","previous_headings":"","what":"Example 1","title":"Examples","text":"first example, ’ll work data frame 151 columns. One columns contains ID, 150 columns contain numeric values. , numeric column, take mean subtract column, new mean value column zero. time spent apply call, ’s best candidate first pass optimization. can also see apply results lot memory allocated deallocated. Memory “churning” often cause performance problems. Looking flame graph, can see apply calls .matrix aperm. two functions convert data frame matrix transpose – even ’ve done useful computations, ’ve spent large amount time transforming data. try speed number ways. One possibility simply leave data matrix form (instead putting data frame line 4). remove need .matrix call, still require aperm transpose data. also lose connection row id column, undesirable. case, using apply columns looks like expensive call aperm. obvious alternative use colMeans function. ’s also another possibility. Data frames implemented lists vectors, column one vector, use lapply vapply apply mean function column. Let’s compare speed four different ways getting column means. colMeans 3x faster using apply mean, looks like ’s still using .matrix, takes significant amount time. lapply/vapplyare faster yet – 10x faster apply. lapply returns values list, vapply returns values numeric vector, form want, looks like vapply way go part. (want finer-grained comparisons code performance, can use microbenchmark package. ’s information microbenchmark profiling chapter Hadley Wickham’s book, Advanced R.) can also see faster methods also result less memory allocation deallocation. coincidence – allocating deallocating memory can expensive. Let’s take original code replace apply vapply: code 3x faster original version. time now spent line 6, majority [<-.data.frame function. usually called syntax x[, j] <- y, equivalent `[<-`(x, , j, y). addition slow, code ugly: side assignment operator ’re indexing data1 twice [. case, ’s useful take step back think broader problem. want normalize column. Couldn’t apply function columns steps, taking mean subtracting ? data frame list, want assign list values data frame, ’ll need use lapply. Now code ’s 6x faster original – ’s shorter elegant well. bad! profiler data helped us identify performance bottlenecks, understanding underlying data structures allowed us approach problem efficient way. optimize code? seems unlikely, given time spent functions implemented C (mean -). doesn’t necessarily mean ’s room improvement, good place move next example.","code":"# Generate data times <- 4e5 cols <- 150 data <- as.data.frame(x = matrix(rnorm(times * cols, mean = 5), ncol = cols)) data <- cbind(id = paste0(\"g\", seq_len(times)), data)  profvis({   data1 <- data   # Store in another variable for this run    # Get column means   means <- apply(data1[, names(data1) != \"id\"], 2, mean)    # Subtract mean from each column   for (i in seq_along(means)) {     data1[, names(data1) != \"id\"][, i] <- data1[, names(data1) != \"id\"][, i] - means[i]   } }) profvis({   data1 <- data   # Four different ways of getting column means   means <- apply(data1[, names(data1) != \"id\"], 2, mean)   means <- colMeans(data1[, names(data1) != \"id\"])   means <- lapply(data1[, names(data1) != \"id\"], mean)   means <- vapply(data1[, names(data1) != \"id\"], mean, numeric(1)) }) profvis({   data1 <- data   means <- vapply(data1[, names(data1) != \"id\"], mean, numeric(1))    for (i in seq_along(means)) {     data1[, names(data1) != \"id\"][, i] <- data1[, names(data1) != \"id\"][, i] - means[i]   } }) profvis({   data1 <- data    # Given a column, normalize values and return them   col_norm <- function(col) {     col - mean(col)   }    # Apply the normalizer function over all columns except id   data1[, names(data1) != \"id\"] <- lapply(data1[, names(data1) != \"id\"], col_norm) })"},{"path":"https://profvis.r-lib.org/articles/examples.html","id":"example-2","dir":"Articles","previous_headings":"","what":"Example 2","title":"Examples","text":"example addresses advanced issues. time, hard directly see causes slowness, able see side-effects, notably side-effects large amounts memory allocation. Suppose data frame contains column ’d like take cumulative sum (don’t know R’s built-cumsum function). ’s one way : takes 2.5 seconds calculate cumulative sum 50,000 items. ’s pretty slow computer program. Looking profvis visualization, can see number notable features: Almost time spent one line code, line 6. Although just one line code, many different functions called line. line also results large amount memory allocated deallocated, somewhat suprising: just looking code, line appears just modify data -place, ’s actually ’s happening internally. flame graph, ’ll see flame graph blocks label $, means samples spent $ function indexing object (R, expression x$y equivalent `$`(x, \"y\")). $ generic function, calls corresponding method object, case $.data.frame. function turn calls [[, calls [[.data.frame. (Zoom see clearly.) flame graph cells label $<-. usual syntax calling function x$y <- z; equivalent `$<-`(x, \"y\", z). (Assignment indexing, x$y[] <- z actually bit complicated, turns cause excessive memory allocation deallocation.) Finally, many flame graph cells contain entire expression line 6. can mean one two things: R currently evaluating expression inside another function call. R another function, function show stack. (number R’s internal functions show profiling data. See FAQ.) profiling data tells us much time spent $ $<-. Maybe avoiding functions entirely speed things . , instead operating data frame columns, can operate temporary vectors. turns , writing function takes vector input returns vector output convenient; provides natural way creating temporary variables can avoid calling $ $<- loop. Using csum function, takes 100 ms 10x much data, 250x fast . may appear functions called line 7, ’s quite true: line also calls [, [<-, -, +. [ [<- functions don’t appear flame graph. internal R functions contain C code handle indexing atomic vectors, dispatched methods. (Contrast first version code, $ dispatched $.data.frame). - + functions can show flame graph, fast sampling profiler may may happen take sample ’re call stack. code panel shows still large amount memory allocated csum function. flame graph. probably noticed gray blocks labeled <GC>. represent times R garbage collection – , freeing (deallocating) chunks memory allocated longer needed. R spending lot time freeing memory, suggests R also spending lot time allocating memory. another common source slowness R code.","code":"profvis({   data <- data.frame(value = runif(5e4))    data$sum[1] <- data$value[1]   for (i in seq(2, nrow(data))) {     data$sum[i] <- data$sum[i-1] + data$value[i]   } }) x <- runif(5e5)  profvis({   csum <- function(x) {     if (length(x) < 2) return(x)      sum <- x[1]     for (i in seq(2, length(x))) {       sum[i] <- sum[i-1] + x[i]     }     sum   }   x$sum <- csum(x) }) #> Warning in x$sum <- csum(x): Coercing LHS to a list"},{"path":"https://profvis.r-lib.org/articles/examples.html","id":"example-3---profiling-a-shiny-application","dir":"Articles","previous_headings":"","what":"Example 3 - Profiling a Shiny Application","title":"Examples","text":"addition R code, can also profile Shiny applications. , simply execute runApp() command inside profvis. instance, can run one shiny’s built-examples using runExample command (wrapper runApp). Shiny application launch, interacting closing app profile generated.  profile Shiny applications automatically hides functions Shiny runs behind scenes. information available FAQ. profile automatically colors outputs blue. example, can identify time output$plot called re-create plot. Profiling Shiny application particularly helpful understanding reactive dependencies. information, see video.","code":"library(shiny) profvis({   runExample(example = \"06_tabsets\", display.mode = \"normal\") })"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"why-do-some-function-calls-not-show-in-the-profiler","dir":"Articles","previous_headings":"","what":"Why do some function calls not show in the profiler?","title":"Frequently asked questions","text":"noted earlier, R’s built-functions don’t show profvis flame graph. include functions like <-, [, $. Although functions can occupy lot time, don’t show call stack. (one examples , $ show call stack, dispatched $.data.frame, opposed R’s internal C code, used indexing lists.) cases side-effects functions can seen flamegraph. saw example , using functions loop led many memory allocations, led garbage collections, <GC> blocks flame graph.","code":""},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"how-do-i-share-a-profvis-visualization","dir":"Articles","previous_headings":"","what":"How do I share a profvis visualization?","title":"Frequently asked questions","text":"Right now easiest way run profvis RStudio, publish RPubs. profile shows RStudio IDE, click Publish button send RPubs. can see example . don’t already account RPubs, ’ll need set one . can also click save (disk) icon. save profvis visualization .Rprofvis file. file can opened RStudio, rename .html extension, can opened web browser. Another way publish profvis visualization save HTML output file using htmlwidgets::saveWidget, put web hosting service: ’s also possible put profvis visualization knitr document. time, CSS workarounds needed needed display properly. can look source website see workarounds.","code":"p <- profvis({   # Interesting code here })  htmlwidgets::saveWidget(p, \"profile.html\")"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"what-does-anonymous-mean","dir":"Articles","previous_headings":"","what":"What does <Anonymous> mean?","title":"Frequently asked questions","text":"’s uncommon R code contain anonymous functions – , functions aren’t named. show <Anonymous> profiling data collected Rprof. code function, make_adder, returns function. ’ll invoke returned function two ways. First, ’ll run make_adder(1)(10). call make_adder(1) returns function, invoked immediately (without saved variable), shows <Anonymous> flame graph. Next, ’ll call make_adder(2) time, ’ll save result variable, adder2. ’ll call adder2(10). way, profiler records function label adder2. equivalent `::`(package, function) `$`(x, \"fun\"), respectively. calls return anonymous functions, R’s internal profiling code labels <Anonymous>. want labels profiler different label, can assign value temporary variable (like adder2 ), invoke . Finally, function passed lapply, show FUN flame graph. inspect source code lapply, ’s clear : function passed lapply, name used function inside lapply FUN.","code":"profvis({   make_adder <- function(n) {     function(x) {       pause(0.25) # Wait for a moment so that this shows in the profiler       x + n     }   }    # Called with no intermediate variable, it shows as \"<Anonymous>\"   make_adder(1)(10)    # With the function saved in a variable, it shows as \"adder2\"   adder2 <- make_adder(2)   adder2(10) }) lapply #> function (X, FUN, ...)  #> { #>     FUN <- match.fun(FUN) #>     if (!is.vector(X) || is.object(X))  #>         X <- as.list(X) #>     .Internal(lapply(X, FUN)) #> } #> <bytecode: 0x5571d0708c50> #> <environment: namespace:base>"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"what-does-cmpfun-mean","dir":"Articles","previous_headings":"","what":"What does cmpfun mean?","title":"Frequently asked questions","text":"first time run profvis function clean 3.4.0 greater R session, ’ll see compiler:::tryCmpfun. example, R attempts compile functions first ran byte code. subsequent function calls, instead reinterpreting body function, R executes saved compiled byte code. Typically, results faster execution times later function calls. example, let’s profile csum second time R session: Now flame graph shows function longer compiled. compiling, csum 40 ms faster.","code":"profvis({   data <- data.frame(value = runif(5e4))    csum <- function(x) {     if (length(x) < 2) return(x)      sum <- x[1]     for (i in seq(2, length(x))) {       sum[i] <- sum[i-1] + x[i]     }     sum   }   data$sum <- csum(data$value) })"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"how-do-i-get-code-from-an-r-package-to-show-in-the-code-panel","dir":"Articles","previous_headings":"","what":"How do I get code from an R package to show in the code panel?","title":"Frequently asked questions","text":"typical use, code written user shown code panel. (code source references available.) Yellow blocks flame graph corresponding lines code code panel, moused , line code highlighted. White blocks flame graph don’t corresponding lines code panel. cases, calls represented white blocks functions base R packages. profvis can also show code ’s inside R package. , source refs package code must available. two general ways : can install package source refs, can use devtools::load_all() load package sources disk.","code":""},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"installing-with-source-refs","dir":"Articles","previous_headings":"How do I get code from an R package to show in the code panel?","what":"Installing with source refs","title":"Frequently asked questions","text":"many ways install package source refs. examples installing ggplot2: CRAN: RStudio package project local disk: Go Build -> Configure Build Tools -> Build Tools -> Build Reload – R CMD INSTALL additional options, add ---keep.source. run Build -> Build Reload. sources disk devtools: sources disk using command line: sources Github:","code":"## First, restart R ## install.packages(\"ggplot2\", type=\"source\", INSTALL_opts=\"--with-keep.source\") ## First, restart R ## # Assuming sources are in a subdirectory ggplot2/ devtools::install(\"ggplot2\", keep_source = TRUE) R CMD INSTALL --with-keep.source ggplot2/ ## First, restart R ## remotes::install_github(\"hadley/ggplot2\", INSTALL_opts=\"--with-keep.source\")"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"loading-packages-with-source-refs-without-installing","dir":"Articles","previous_headings":"How do I get code from an R package to show in the code panel?","what":"Loading packages with source refs (without installing)","title":"Frequently asked questions","text":"Instead installing -development package, can simply load source using devtools. package loaded installed source refs, profvis visualizations display source code package. example, visualization yellow blocks user code code ggplot2, contains ggplot2 code code panel:","code":"# Assuming sources are in a subdirectory ggplot2/ devtools::load_all(\"ggplot2\") library(ggplot2) profvis({   g <- ggplot(diamonds, aes(carat, price)) + geom_point(size = 1, alpha = 0.2)   print(g) })"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"can-i-profile-code-without-calling-profvis","dir":"Articles","previous_headings":"","what":"Can I profile code without calling profvis()?","title":"Frequently asked questions","text":"Yes. two ways . RStudio, can select Profile->Start Profiling, run code, Profile->Stop Profiling. stop profiling, profvis viewer come . Another way start stop R profiler manually, profvis read recorded profiling data. profile code, run: can load data profvis: technique can also used profile just one section code.","code":"# Start profiler Rprof(\"data.Rprof\", interval = 0.01, line.profiling = TRUE,       gc.profiling = TRUE, memory.profiling = TRUE)  ## Run your code here  # Stop profiler Rprof(NULL) profvis(prof_input = \"data.Rprof\")"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"why-does-the-flame-graph-hide-some-function-calls-for-shiny-apps","dir":"Articles","previous_headings":"","what":"Why does the flame graph hide some function calls for Shiny apps?","title":"Frequently asked questions","text":"profiling Shiny applications, profvis flame graph hide many function calls default. ’re hidden aren’t particularly informative optimizing code, add visual complexity. feature requires Shiny 0.13.0 greater. want see hidden blocks, uncheck Options -> Hide internal function calls: make hiding work, Shiny special functions called ..stacktraceon.. ..stacktraceoff... profvis goes stack, sees ..stacktraceoff.., hide function calls sees corresponding ..stacktraceon... nukltiple ..stacktraceoff.. calls stack, requires equal number ..stacktraceon.. calls starts displaying function calls .","code":"library(shiny) profvis({   # After this app has started, interact with it a bit, then quit   runExample(\"06_tabsets\", display.mode = \"normal\") })"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"can-i-profile-just-part-of-a-shiny-application","dir":"Articles","previous_headings":"","what":"Can I profile just part of a Shiny application?","title":"Frequently asked questions","text":"Sometimes useful profile just part Shiny application, instead whole thing start finish. RStudio, can start application, select Profile->Start Profiling, interact application, select Profile->Stop Profiling. stop profiling, profvis viewer come . Profivs also provides Shiny Module initiate profiling, provides UI start, stop, view, download profvis sessions. done profvis::profvis_server profvis::profvis_ui. example, ’s small app uses module: server function, callModule(profvis_server, \"profiler\") sets profvis session, UI profvis_ui(\"profiler\") sets basic interface start, stop, view, download profvis sessions. can create profvis_server profvis_ui functions calling Rprof() start stop profiling (described answer), trigger actionButton. example, put UI: put server function: add radio buttons turn profiling . Turn , interact app, turn . file name corresponding start time. can view profiler output profvis, something like :","code":"library(shiny) library(ggplot2) library(profvis) shinyApp(   fluidPage(     plotOutput(\"plot\"),     actionButton(\"new\", \"New plot\"),     profvis_ui(\"profiler\")   ),   function(input, output, session) {     callModule(profvis_server, \"profiler\")      output$plot <- renderPlot({       input$new       ggplot(diamonds, aes(carat, price)) + geom_point()     })   } ) radioButtons(\"profile\", \"Profiling\", c(\"off\", \"on\")) observe({     if (identical(input$profile, \"off\")) {       Rprof(NULL)     } else if (identical(input$profile, \"on\")){       Rprof(strftime(Sys.time(), \"%Y-%m-%d-%H-%M-%S.Rprof\"),             interval = 0.01, line.profiling = TRUE,             gc.profiling = TRUE, memory.profiling = TRUE)     }   }) profvis(prof_input = \"2018-08-07-12-22-35.Rprof\")"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"can-i-profile-a-shiny-application-running-on-a-remote-server","dir":"Articles","previous_headings":"","what":"Can I profile a Shiny application running on a remote server?","title":"Frequently asked questions","text":"Yes. One option include profvis Shiny Module desribed previous question. can also set manually. main idea start stop profiling (described answer). top app.R server.R, can add following: start profiling app starts, stop exits.","code":"Rprof(strftime(Sys.time(), \"%Y-%m-%d-%H-%M-%S.Rprof\"),       interval = 0.01, line.profiling = TRUE,       gc.profiling = TRUE, memory.profiling = TRUE)  onStop(function() {   Rprof(NULL) })"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"why-does-sys-sleep-not-show-up-in-profiler-data","dir":"Articles","previous_headings":"","what":"Why does Sys.sleep() not show up in profiler data?","title":"Frequently asked questions","text":"R profiler doesn’t provide data R makes system call. , example, call Sys.sleep(5), R process pause 5 seconds, probably won’t see instances Sys.sleep profvis visualization – won’t even take horizontal space. examples, ’ve used pause function instead, part profvis package. ’s similar Sys.sleep, except show profiling data. example: Calls external programs libraries also may show profiling data. call functions package fetch data external sources, keep mind time spent functions may show profiler.","code":"profvis({   # Does not show in the flame graph   Sys.sleep(0.25)    # Does show in the flame graph   pause(0.25) })"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"why-is-the-call-stack-reversed-for-some-of-my-code","dir":"Articles","previous_headings":"","what":"Why is the call stack reversed for some of my code?","title":"Frequently asked questions","text":"One unusual features R programming language lazy evaluation function arguments. pass expression function, expression won’t evaluated ’s actually used somewhere function. result sometimes stack can look like ’s wrong order. example , call times_10 times_10_lazy. call times_5() times_2(), “regular” version uses intermediate variable y, lazy version nests calls, times_2(times_5(x)). programming languages, flame graph look : times_10 (times_10_lazy) block bottom, times_5 times_2 side--side next level stack. lazy evaluation, times_10_lazy function calls times_2(times_5(x)), times_2 function receives promise unevaluated expression times_5(x), evaluates reaches line 9, x * 2 (expression gets evaluated correct context, ’s naming collision x variable). ’s call stack surprising order times_10_lazy – temporal order simulated work ’re function (represented pause blocks) different. times_2 times_5 functions pause 0.2 0.5 seconds, respectively. pauses occur opposite order times_10 times_10_lazy. Keep mind lazy evaluation may result counterintuitive results flame graph. want avoid possible confusion lazy evaluation, can use intermediate variables force evaluation arguments specific locations code, times_10.","code":"profvis({   times_5 <- function(x) {     pause(0.5)     x * 5   }    times_2 <- function(x) {     pause(0.2)     x * 2   }    times_10 <- function(x) {     y <- times_5(x)     times_2(y)   }    times_10_lazy <- function(x) {     times_2(times_5(x))   }    times_10(10)   times_10_lazy(10) })"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"why-does-profvis-tell-me-the-the-wrong-line-is-taking-time","dir":"Articles","previous_headings":"","what":"Why does profvis tell me the the wrong line is taking time?","title":"Frequently asked questions","text":"cases, multi-line expressions report first line expression one takes time. example , two loops: one curly braces, one without. loop curly braces, reports line 3, containing pause one takes time. loop without curly braces, reports line 6, containing , one takes time, even though time really spent line 7, pause. code contains multi-line expressions like , using curly braces allow profiler identify correct line code running.","code":"profvis({   for (i in 1:3) {     pause(0.1)   }    for (i in 1:3)     pause(0.1)  })"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"how-do-i-interpret-memory-profiling-information","dir":"Articles","previous_headings":"","what":"How do I interpret memory profiling information?","title":"Frequently asked questions","text":"memory profiling information can somewhat tricky interpret, two reasons. first reason , compared call stack information, memory usage information collected different temporal characteristics: call stack information recorded instantaneously sample, memory information recorded sample. second reason memory deallocations happen somewhat randomly, may happen long point memory longer needed. deallocations occur garbage collection (<GC>) events. reasons, might look like particular line code (function call flame graph) responsible memory allocation deallocation, reality memory use due previous line code. section code results large amount allocation deallocation, means ’s “churning” memory using large amonut temporary memory storage. can seen Example 1 . cases, may possible optimize code doesn’t use much temporary memory. section code results large amount allocation large amount deallocation, means memory released. code genuinely requires extra memory, also sign memory leak.","code":""},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"how-do-i-split-the-panes-vertically-instead-of-horizontally","dir":"Articles","previous_headings":"","what":"How do I split the panes vertically instead of horizontally?","title":"Frequently asked questions","text":"profvis examples document vertical split, default, profvis visualizations horizontal split. switch directions, can check uncheck Options -> Split horizontally. change split direction visualization opens, use split=\"v\":","code":"profvis({   # Code here }, split = \"v\")   # Also possible to control the split when calling print() p <- profvis({   # Code here }) print(p, split = \"v\")"},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"how-do-i-get-source-code-to-show-with-rscript","dir":"Articles","previous_headings":"","what":"How do I get source code to show with Rscript?","title":"Frequently asked questions","text":"run profvis script, source code won’t show source panel. source refs recorded default R run non-interactively. make work, use options(keep.source=TRUE). example:","code":"Rscript -e \"options(keep.source=TRUE); p <- profvis::profvis({ profvis::pause(0.2) }); htmlwidgets::saveWidget(p, 'test.html')\""},{"path":"https://profvis.r-lib.org/articles/faq.html","id":"what-are-some-other-resources-for-profiling-r-code","dir":"Articles","previous_headings":"","what":"What are some other resources for profiling R code?","title":"Frequently asked questions","text":"Base R comes Rprof function (’s profvis calls collect profiling data) well summaryRprof function getting human-readable summary profiling data collected Rprof. Luke Tierney Riad Jarjour authored proftools package, provides many tools summarizing profiling data, including hot paths, call summaries, call graphs. Proftools can also used generate number visualizations, including call graphs, flame graphs, callee tree maps.","code":""},{"path":"https://profvis.r-lib.org/articles/profvis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with profvis","text":"profvis tool helping understand R spends time. provides interactive graphical interface visualizing data Rprof(), R’s built-tool collecting profiling data. R users times ’ve wanted code run faster. However, ’s always clear accomplish . common approach rely intuition, wisdom broader R community speeding R code. One drawback can lead focus optimizing things actually take small proportion overall running time. Suppose make loop run 5 times faster. sounds like huge improvement, loop takes 10% total time, ’s still 8% speedup overall. Another drawback , although many commonly-held beliefs true (example, preallocating memory can speed things ), (e.g., *apply functions inherently faster loops). can lead us spend time “optimizations” don’t really help. make slow code faster, need accurate information making code slow.","code":""},{"path":"https://profvis.r-lib.org/articles/profvis.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Getting started with profvis","text":"example profvis use. code generates random 50,000 row data set, draws plot, fits linear model, draws line model. (plot isn’t displayed document, though.) copy paste code R console, ’ll open window profvis interface see HTML document. top code, bottom flame graph. flame graph, horizontal direction represents time milliseconds, vertical direction represents call stack. Looking bottom-items stack, time, 2 seconds, spent plot, much smaller amount time spent lm, almost time spent abline – doesn’t even show flame graph. Traveling stack, plot called plot.formula, called .call, . Going levels, can see plot.default called number functions: first deparse, later, plot.xy. Similarly, lm calls number different functions. top, can see amount time spent line code. tells us, unsurprisingly, time spent line plot, little bit spent line lm. code panel also shows memory allocation deallocation. Interpreting information can little tricky, necessarily reflect memory allocated deallcated line code. sampling profiler records information memory allocations happen previous sample current one. means allocation/deallocation values line may actually occurred previous line code.","code":"library(profvis)  profvis({   df <- data.frame(x = rnorm(5e5), y = rnorm(5e5))    plot(y ~ x, data = df)   m <- lm(y ~ x, data = df)   abline(m, col = \"red\") })"},{"path":"https://profvis.r-lib.org/articles/profvis.html","id":"navigating-profvis","dir":"Articles","previous_headings":"Getting started","what":"Navigating profvis","title":"Getting started with profvis","text":"profvis interactive. can try following: mouse flame graph, information block show info box. Yellow flame graph blocks corresponding lines code left. (White blocks represent code profvis doesn’t source code – example, base R R packages. see FAQ want package code show code panel.) mouse yellow block, corresponding line code highlighted. Note highlighted line code yellow function called , content function. mouse line code, flame graph blocks called line highlighted. Click block line code lock current highlighting. Click background, item unlock highlighting. Click another item lock item. Use mouse scroll wheel trackpad’s scroll gesture zoom x direction. Click drag flame graph pan , , left, right. Double-click background zoom x axis original extent. Double-click flamegraph block zoom x axis width block. block flame graph represents call function, possibly multiple calls function. width block proportional amount time spent function. function calls another function, another block added top flame graph. profiling data limitations: internal R functions don’t show flame graph, offers insight code ’s implemented languages R (e.g. C, C++, Fortran).","code":""},{"path":"https://profvis.r-lib.org/articles/profvis.html","id":"the-data-view","dir":"Articles","previous_headings":"Getting started","what":"The data view","title":"Getting started with profvis","text":"addition flame graph view, profvis provides data view, can seen clicking Data tab. provides top-tabular view profile. Click code column expand call stack investigation following columns reason resource allocation: Memory: Memory allocated deallocated (negative numbers) given call stack. represented megabytes aggregated call stacks code given row. Time: Time spent milliseconds. field also aggregated call stacks executed code given row.","code":""},{"path":"https://profvis.r-lib.org/articles/profvis.html","id":"how-profiling-data-is-collected","dir":"Articles","previous_headings":"","what":"How profiling data is collected","title":"Getting started with profvis","text":"profvis uses data collected Rprof(), part base R distribution. time interval (profvis() uses default interval 10ms), profiler stops R interpreter, looks current function call stack, records file. works sampling, result isn’t deterministic. time profile code, result slightly different.","code":""},{"path":"https://profvis.r-lib.org/articles/rstudio.html","id":"profiling-code","dir":"Articles","previous_headings":"","what":"Profiling code","title":"RStudio IDE integration","text":"number ways start stop profiler. Profile menu, can start stop profiler. Profile menu, can run selected block code profiling. editor pane’s code tool menu, can run selected block code profiling: Finally, ’s also possible use profvis calling profvis() function, demonstrated rest documentation site.","code":""},{"path":"https://profvis.r-lib.org/articles/rstudio.html","id":"exploring-profiles-in-rstudio","dir":"Articles","previous_headings":"","what":"Exploring profiles in RStudio","title":"RStudio IDE integration","text":"Profiles open new tab RStudio IDE.  viewed RStudio, profiles extra features: Opening sources: source refs code executed, ran code using source() Source menu RStudio code editor, double-clicking line code profile viewer open file editor. won’t available code run console, shown . want able view code package, see FAQ. Opening saving profiles: Profiles can saved sharing viewing future. Profile files extension .Rprofvis. wish share profile viewing web browser, can simply rename file .html extension. Profiling Shiny applications: Entire Shiny applications can profiled starting profiler launching application. capture just part Shiny session, can start stop profiler application running. Publishing profiles: Profiles can shared RPubs clicking Publish button. See FAQ information.","code":""},{"path":"https://profvis.r-lib.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. Winston Chang. Author. Javier Luraschi. Author. Timothy Mastny. Author. . Copyright holder, funder. jQuery Foundation. Copyright holder.           jQuery library jQuery contributors. Contributor, copyright holder.           jQuery library; authors listed inst/htmlwidgets/lib/jquery/AUTHORS.txt Mike Bostock. Contributor, copyright holder.           D3 library D3 contributors. Contributor.           D3 library Ivan Sagalaev. Contributor, copyright holder.           highlight.js library","code":""},{"path":"https://profvis.r-lib.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H, Chang W, Luraschi J, Mastny T (2024). profvis: Interactive Visualizations Profiling R Code. R package version 0.4.0, https://github.com/r-lib/profvis, https://profvis.r-lib.org.","code":"@Manual{,   title = {profvis: Interactive Visualizations for Profiling R Code},   author = {Hadley Wickham and Winston Chang and Javier Luraschi and Timothy Mastny},   year = {2024},   note = {R package version 0.4.0, https://github.com/r-lib/profvis},   url = {https://profvis.r-lib.org}, }"},{"path":"https://profvis.r-lib.org/index.html","id":"profvis","dir":"","previous_headings":"","what":"Interactive Visualizations for Profiling R Code","title":"Interactive Visualizations for Profiling R Code","text":"profvis tool visualizing code profiling data R. creates web page provides graphical interface exploring data.","code":""},{"path":"https://profvis.r-lib.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interactive Visualizations for Profiling R Code","text":"","code":"install.packages(\"profvis\")"},{"path":"https://profvis.r-lib.org/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Interactive Visualizations for Profiling R Code","text":"run code profiling, wrap expression profvis(). default, result interactive profile visualizer opening web browser. profvis() call returns htmlwidget, default printed opens web browser. wish save object, won’t open browser first, can view later typing variable name console, calling print() .","code":"library(profvis)  f <- function() {   pause(0.1)   g()   h() } g <- function() {   pause(0.1)   h() } h <- function() {   pause(0.1) }  profvis(f()) p <- profvis(f())  # View it with: p # or print(p)"},{"path":"https://profvis.r-lib.org/reference/parse_rprof.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Rprof output file for use with profvis — parse_rprof","title":"Parse Rprof output file for use with profvis — parse_rprof","text":"Parse Rprof output file use profvis","code":""},{"path":"https://profvis.r-lib.org/reference/parse_rprof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Rprof output file for use with profvis — parse_rprof","text":"","code":"parse_rprof(path = \"Rprof.out\", expr_source = NULL)"},{"path":"https://profvis.r-lib.org/reference/parse_rprof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Rprof output file for use with profvis — parse_rprof","text":"path Path Rprof() output file. expr_source source refs profiling output empty filename, means refer code executed R console. code can captured passed (string) expr_source argument.","code":""},{"path":"https://profvis.r-lib.org/reference/pause.html","id":null,"dir":"Reference","previous_headings":"","what":"Pause an R process — pause","title":"Pause an R process — pause","text":"function pauses R process amount time. differs Sys.sleep() time spent pause show profiler data. Another difference pause uses 100\\ whereas Sys.sleep .","code":""},{"path":"https://profvis.r-lib.org/reference/pause.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pause an R process — pause","text":"","code":"pause(seconds)"},{"path":"https://profvis.r-lib.org/reference/pause.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pause an R process — pause","text":"seconds Number seconds pause.","code":""},{"path":"https://profvis.r-lib.org/reference/pause.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pause an R process — pause","text":"","code":"# Wait for 0.5 seconds pause(0.5) #> NULL"},{"path":"https://profvis.r-lib.org/reference/print.profvis.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a profvis object — print.profvis","title":"Print a profvis object — print.profvis","text":"Print profvis object","code":""},{"path":"https://profvis.r-lib.org/reference/print.profvis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a profvis object — print.profvis","text":"","code":"# S3 method for class 'profvis' print(x, ..., width = NULL, height = NULL, split = NULL, aggregate = NULL)"},{"path":"https://profvis.r-lib.org/reference/print.profvis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a profvis object — print.profvis","text":"x object print. ... arguments passed print methods. width Width htmlwidget. height Height htmlwidget split Orientation split bar: either \"h\" (default) horizontal \"v\" vertical. aggregate TRUE, profiled stacks aggregated name. makes easier see big picture. Set global default argument options(profvis.aggregate = ).","code":""},{"path":"https://profvis.r-lib.org/reference/profvis-package.html","id":null,"dir":"Reference","previous_headings":"","what":"profvis: Interactive Visualizations for Profiling R Code — profvis-package","title":"profvis: Interactive Visualizations for Profiling R Code — profvis-package","text":"Interactive visualizations profiling R code.","code":""},{"path":[]},{"path":"https://profvis.r-lib.org/reference/profvis-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"profvis: Interactive Visualizations for Profiling R Code — profvis-package","text":"Maintainer: Hadley Wickham hadley@posit.co Authors: Winston Chang Javier Luraschi Timothy Mastny contributors: Posit Software, PBC [copyright holder, funder] jQuery Foundation (jQuery library) [copyright holder] jQuery contributors (jQuery library; authors listed inst/htmlwidgets/lib/jquery/AUTHORS.txt) [contributor, copyright holder] Mike Bostock (D3 library) [contributor, copyright holder] D3 contributors (D3 library) [contributor] Ivan Sagalaev (highlight.js library) [contributor, copyright holder]","code":""},{"path":"https://profvis.r-lib.org/reference/profvis.html","id":null,"dir":"Reference","previous_headings":"","what":"Profile an R expression and visualize profiling data — profvis","title":"Profile an R expression and visualize profiling data — profvis","text":"function run R expression profiling, return htmlwidget interactively exploring profiling data.","code":""},{"path":"https://profvis.r-lib.org/reference/profvis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile an R expression and visualize profiling data — profvis","text":"","code":"profvis(   expr = NULL,   interval = 0.01,   prof_output = NULL,   prof_input = NULL,   timing = NULL,   width = NULL,   height = NULL,   split = c(\"h\", \"v\"),   torture = 0,   simplify = TRUE,   rerun = FALSE )"},{"path":"https://profvis.r-lib.org/reference/profvis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile an R expression and visualize profiling data — profvis","text":"expr Expression profile. expression turned body zero-argument anonymous function called repeatedly needed. means create variables inside expr available outside . expression repeatedly evaluated Rprof() produces output. can quosure injected rlang::inject() contain injected quosures. compatible prof_input. interval Interval profiling samples, seconds. Values less 0.005 (5 ms) probably result accurate timings prof_output Name Rprof output file directory save profiling data. NULL (default), temporary file used automatically removed function exits. directory, random filename used. prof_input path Rprof() data file.  compatible expr prof_output. timing type timing use. Either \"elapsed\" (default) wall clock time, \"cpu\" CPU time. Wall clock time includes time spent waiting processes (e.g. waiting web page download) generally useful. NULL, default, use elapsed time possible, .e. Windows R 4.4.0 greater. width Width htmlwidget. height Height htmlwidget split Orientation split bar: either \"h\" (default) horizontal \"v\" vertical. torture Triggers garbage collection every torture memory allocation call. Note memory allocation approximate due nature sampling profiler garbage collection: garbage collection triggers, memory allocations attributed different lines code. Using torture = steps helps prevent , making R trigger garbage collection every torture memory allocation step. simplify Whether simplify profiles removing intervening frames caused lazy evaluation. Equivalent filter.callframes argument Rprof(). rerun TRUE, Rprof() run expr profile actually produced. useful cases expr returns quickly, R time sample profile. Can also string containing regexp match profiles. case, profvis() reruns expr regexp matches modal value profile stacks.","code":""},{"path":"https://profvis.r-lib.org/reference/profvis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Profile an R expression and visualize profiling data — profvis","text":"alternate way use profvis separately capture profiling data file using Rprof(), pass path corresponding data file prof_input argument profvis().","code":""},{"path":[]},{"path":"https://profvis.r-lib.org/reference/profvis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Profile an R expression and visualize profiling data — profvis","text":"","code":"# Only run these examples in interactive R sessions if (interactive()) {  # Profile some code profvis({   dat <- data.frame(     x = rnorm(5e4),     y = rnorm(5e4)   )    plot(x ~ y, data = dat)   m <- lm(x ~ y, data = dat)   abline(m, col = \"red\") })   # Save a profile to an HTML file p <- profvis({   dat <- data.frame(     x = rnorm(5e4),     y = rnorm(5e4)   )    plot(x ~ y, data = dat)   m <- lm(x ~ y, data = dat)   abline(m, col = \"red\") }) htmlwidgets::saveWidget(p, \"profile.html\")  # Can open in browser from R browseURL(\"profile.html\")  }"},{"path":"https://profvis.r-lib.org/reference/profvisOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Widget output and renders functions for use in Shiny — profvisOutput","title":"Widget output and renders functions for use in Shiny — profvisOutput","text":"Widget output renders functions use Shiny","code":""},{"path":"https://profvis.r-lib.org/reference/profvisOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widget output and renders functions for use in Shiny — profvisOutput","text":"","code":"profvisOutput(outputId, width = \"100%\", height = \"600px\")  renderProfvis(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://profvis.r-lib.org/reference/profvisOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widget output and renders functions for use in Shiny — profvisOutput","text":"outputId Output variable profile visualization. width Width htmlwidget. height Height htmlwidget expr expression returns profvis object. env environment evaluate expr. quoted expr quoted expression (quote())?","code":""},{"path":"https://profvis.r-lib.org/reference/profvis_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"profvis UI for Shiny Apps — profvis_ui","title":"profvis UI for Shiny Apps — profvis_ui","text":"Use Shiny module inject profvis controls Shiny app. profvis Shiny module injects UI can used start stop profiling, either view results profvis UI download raw .Rprof data. highly recommended used testing debugging , included production apps!","code":""},{"path":"https://profvis.r-lib.org/reference/profvis_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"profvis UI for Shiny Apps — profvis_ui","text":"","code":"profvis_ui(id)  profvis_server(input, output, session, dir = \".\")"},{"path":"https://profvis.r-lib.org/reference/profvis_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"profvis UI for Shiny Apps — profvis_ui","text":"id Output id profvis_server. input, output, session Arguments provided shiny::callModule(). dir Output directory save Rprof files.","code":""},{"path":"https://profvis.r-lib.org/reference/profvis_ui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"profvis UI for Shiny Apps — profvis_ui","text":"usual way use profvis Shiny simply call profvis(shiny::runApp()), may always possible desirable: first, want profile particular interaction Shiny app capture calculations involved starting app getting correct state; second, trying profile application deployed server. details invoke Shiny modules, see article.","code":""},{"path":"https://profvis.r-lib.org/reference/profvis_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"profvis UI for Shiny Apps — profvis_ui","text":"","code":"# In order to avoid \"Hit <Return> to see next plot\" prompts, # run this example with `example(profvis_ui, ask=FALSE)`  if(interactive()) {   library(shiny)   shinyApp(     fluidPage(       plotOutput(\"plot\"),       actionButton(\"new\", \"New plot\"),       profvis_ui(\"profiler\")     ),     function(input, output, session) {       callModule(profvis_server, \"profiler\")        output$plot <- renderPlot({         input$new         boxplot(mpg ~ cyl, data = mtcars)       })     }   ) }"},{"path":"https://profvis.r-lib.org/news/index.html","id":"profvis-040","dir":"Changelog","previous_headings":"","what":"profvis 0.4.0","title":"profvis 0.4.0","text":"CRAN release: 2024-09-20 profvis now requires R 4.0.0. bundled version jQuery upgraded 3.7.1 (@hedsnz, #139) bundled highlight.js updated 11.10.0 (#140). longer longer requires purrr stringr, longer suggests ggplot2, devtools, knitr, rmarkdown. provis() uses new technique trimming uninteresting frames stack (#130). requires new evaluation model code supply profvis() turned body zero-argument anonymous function called profvis. subtly changes semantics evaluation, primary effect create variables inside profiled code longer available outside . profvis() now uses elapsed time possible (#72). profvis() now uses doubles instead integers (#114). CSS profvis code scoped affect blocks code, RMarkdown Quarto (@wch, #140).","code":""},{"path":"https://profvis.r-lib.org/news/index.html","id":"profvis-038","dir":"Changelog","previous_headings":"","what":"profvis 0.3.8","title":"profvis 0.3.8","text":"CRAN release: 2023-05-02 print() gains aggregate argument. Use print(profvis(f()), aggregate = TRUE) aggregate frames name flamegraph. makes easier see big picture (#115). Set profvis.aggregate global option TRUE change default. C function declarations take parameters, added void parameter.","code":""},{"path":"https://profvis.r-lib.org/news/index.html","id":"profvis-037","dir":"Changelog","previous_headings":"","what":"profvis 0.3.7","title":"profvis 0.3.7","text":"CRAN release: 2020-11-02 Resolved #102:” Added simplify argument. TRUE (default), profiles simplified using new filter.callframes argument R 4.0. argument effect older R versions. (#118) Fixed #111: auto-scrolling lines code work browsers. (#113)","code":""},{"path":"https://profvis.r-lib.org/news/index.html","id":"profvis-036","dir":"Changelog","previous_headings":"","what":"profvis 0.3.6","title":"profvis 0.3.6","text":"CRAN release: 2019-05-14 Added profvis Shiny module, starting/stopping profiler execution Shiny application. can helpful don’t want profile entire execution app, certain operation. install profvis module app, add profvis_ui(\"profvis\") UI, callModule(profvis_server, \"profvis\") server function. Exported parse_rprof function.","code":""},{"path":"https://profvis.r-lib.org/news/index.html","id":"profvis-035","dir":"Changelog","previous_headings":"","what":"profvis 0.3.5","title":"profvis 0.3.5","text":"CRAN release: 2018-02-22 Fixed problem development build R source refs turned default (reported Tomas Kalibera).","code":""},{"path":"https://profvis.r-lib.org/news/index.html","id":"profvis-034","dir":"Changelog","previous_headings":"","what":"profvis 0.3.4","title":"profvis 0.3.4","text":"CRAN release: 2017-12-12 Fixed #77: contents <expr> now always listed first. Addressed #85: pause() function now implemented C, reduces amount data generated. Fixed #86: data pane, toggling horizontal/vertical view caused flame graph render top tree view. Fixed #84: data pane, leaf nodes (representing top-calls stack) displayed. Addressed #82: data pane, node exactly one child, child automatically expanded. makes efficient explore data. (#83) Fixed #50: data pane, function calls shown reverse order.","code":""},{"path":"https://profvis.r-lib.org/news/index.html","id":"profvis-033","dir":"Changelog","previous_headings":"","what":"profvis 0.3.3","title":"profvis 0.3.3","text":"CRAN release: 2017-01-13 Fixed #68: profvis threw error package installed using devtools::install_github(args = \"---keep.source\"). Fix bug , loading profile didn’t contain memory data, profvis throw error. #66 Fixed #73: profvis throw error used code sourced remote URL.","code":""}]
